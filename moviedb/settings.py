"""
Django settings for moviedb project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import platform
import environ  # django-environ

# read the ".env" file in same directory as settings.py
env = environ.Env()
environ.Env.read_env()


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "192.168.1.36",
]


# Application definition

INSTALLED_APPS = [
    "movie.apps.MovieConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    #'django-sendfile',                 # package django-sendfile2 (not strictly nessessary)
    "axes",  # package django-axes
    "admin_honeypot",  # package django-admin-honeypot
]

AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesStandaloneBackend",
    # Django ModelBackend is the default authentication backend.
    "django.contrib.auth.backends.ModelBackend",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "global_login_required.GlobalLoginRequiredMiddleware",  # package django-glrm
    # AxesMiddleware should be the last middleware in the MIDDLEWARE list.
    # It only formats user lockout messages and renders Axes lockout responses
    # on failed user authentication attempts from login views.
    # If you do not want Axes to override the authentication response
    # you can skip installing the middleware and use your own views.
    "axes.middleware.AxesMiddleware",
]

ROOT_URLCONF = "moviedb.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "moviedb.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "movies.db"),
    }
}

# set default autofield when no primary_key declared in models
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Mailing config
# https://docs.djangoproject.com/en/3.0/ref/settings/#

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = env("EMAIL_USE_TLS")
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "fr"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# locale specification
if platform.system() == "Linux":
    LOCALE = "fr_FR.utf8"
else:
    # (windows)
    LOCALE = "fr"

# "override" the django variable SHORT_DATE_FORMAT via template tag 'shortdate' (in movie.templatetags.mytags)
# if MY_SHORT_DATE_FORMAT is not defined, the standard localized 'SHORT_DATE_FORMAT' is used
MY_SHORT_DATE_FORMAT = "d/m/Y"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_DIRS = [os.path.join(BASE_DIR, "moviedb/static/")]

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"


# Media url, path
#
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"


#
# Config Django Global Login Required Middleware (django-glrm)
#
PUBLIC_PATHS = [
    f"^{MEDIA_URL}.*",  # allow public access to any media on your application
    r"^/accounts/.*",  # allow public access to all django-allauth views
]


#
# Config Axes middleware
#
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 3
AXES_LOCK_OUT_AT_FAILURE = True
AXES_COOLOFF_TIME = 1
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True


#
#  Specific settings for this application outside django
#

# TMDb API
TMDB_API_KEY = env("TMDB_API_KEY")
TMDB_API_LANG = "fr"

LOGIN_REDIRECT_URL = "home"

# Do not use password for login standard users (no admin nor staff)
USE_NO_USER_PASSWORD = False
if USE_NO_USER_PASSWORD:
    # specific athentification backend for login without password
    AUTHENTICATION_BACKENDS = ["movie.authentication.NopassAuthBackend"]
    INSTALLED_APPS.remove("axes")
    MIDDLEWARE.remove("axes.middleware.AxesMiddleware")
    MIDDLEWARE.remove("global_login_required.GlobalLoginRequiredMiddleware")

# no session expiration before 100 years !
SESSION_COOKIE_AGE = 3600 * 24 * 365 * 100

# number of movies per html page
MOVIES_PER_PAGE = 15

# number in the top pages (top actors, top composers, ...)
NUM_TOP = 100

# string for all volumes
ALL_VOLUMES = "All Volumes"

# Populate volumes labels in list box, declare MediaServers
VOLUMES = [
    # for each volume :
    #   (volume_label, volume_alias, volume_type, (DLNA_device, DLNA_movie_path))
    (ALL_VOLUMES, ALL_VOLUMES, "", (None, None)),
    (
        "DiskStation",
        "Synology",
        "network",
        ("http://192.168.1.23:50001/desc/device.xml", "Vid√©o/Films"),
    ),
    ("Expansion", "Expansion", "harddisk", (None, None)),
]

# MAIN_VOLUME is the main media server (index page use references to this volume)
MAIN_VOLUME = VOLUMES[2]

DLNA_MEDIASERVERS = {vol[0].lower(): vol[3] for vol in VOLUMES}

# list of DLNA renderers in your home
DLNA_RENDERERS = [
    # for each device :
    #   (DLNA Device location, a smart name)
    ("http://192.168.1.16:42300/description.xml", "Orange Decoder"),
    ("http://192.168.1.15:52235/dmr/SamsungMRDesc.xml", "TV Samsung"),
    # specific name for view on computer :
    ("browser", "View in Browser"),
    ("vlc", "View in VLC"),
]

# client network for accessing to DLNA commands
DLNA_NETWORK = "192.168.1.0/24"


#
# configure django-sendfile2 (for video/subtitle download from site)
#
if platform.system() == "Linux":
    # site in production on synology
    SENDFILE_BACKEND = "django_sendfile.backends.nginx"
    SENDFILE_ROOT = "/var/services/video"
    SENDFILE_URL = "/video"
else:
    # for development
    SENDFILE_BACKEND = "django_sendfile.backends.simple"
    SENDFILE_ROOT = "\\\\DiskStation\\video"

# video filenames (from db) starting with this pattern are downloadable :
# remove this part from filename for get the download path for django-sendfile with backen nginx
DOWNLOADABLE_PATTERN = "DiskStation:\\video\\"

# default hidden fields for movies table (in 'poster, 'screen', 'size', 'file', 'rate', 'format)
HIDDEN_FIELDS = ["size", "file", "format"]

# Max number of posters to import from TMDB
MAX_POSTERS = 4
